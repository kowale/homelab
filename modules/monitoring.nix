{ config, pkgs, ... }:

let

  inherit (config.networking) hostName;
  nodeExporter = config.services.prometheus.exporters.node;

  # https://blog.korfuri.fr/posts/2022/11/autogenerated-prometheus-configs-for-multiple-nixos-hosts/

in {

  # Consume alerts from alertmanager
  services.webhook = {
    enable = true;
    hooks = {
      ok = {
        execute-command = "echo";
        response-message = "OK";
      };
      effect = {
        include-command-output-in-response-on-error = true;
        # include-command-output-in-response = true;
        execute-command = let
          effect = pkgs.writeScript "effect" ''
            echo haii
            echo hiii > /tmp/effect
            echo baiii
          '';
        in
          "${effect}";
      };
      alertmanager = {
        execute-command = "echo $(date) > /tmp/alert";
        incoming-payload-content-type = "application/json";
        pass-arguments-to-command = [
          {
            source = "payload";
            name = "externalURL";
          }
          {
            source = "payload";
            name = "alerts.0.status";
          }
          {
            source = "payload";
            name = "alerts.0.annotations.summary";
          }
          {
            source = "payload";
            name = "alerts.0.annotations.description";
          }
        ];
      };
    };
  };

  services.prometheus = {
    enable = true;
    port = 9001;
    listenAddress = "127.0.0.1";

    pushgateway = {
      enable = true;
      web.listen-address = "127.0.0.1:9091";
    };

    rules = [
      ""
    ];

    # Send alerts to a webhook
    alertmanager = {
      enable = true;
      configuration = {
        route.receiver = "webhook";
        receivers = [
          {
            name = "webhook";
            webhook_configs = [
              {
                url = "http://127.0.0.1:${toString config.services.webhook.port}/hooks/alertmanager";
              }
            ];
          }
        ];
      };
    };

    scrapeConfigs = [

      {
        job_name = "node";
        static_configs = [{
          targets = [
            "127.0.0.1:${toString config.services.prometheus.exporters.node.port}"
          ];
        }];
      }

      {
        job_name = "pushgateway";
        static_configs = [{
          targets = [
            "${toString config.services.prometheus.pushgateway.web.listen-address}"
          ];
        }];
      }


      {
        job_name = "mtr";
        static_configs = [{
          targets = [
            "127.0.0.1:${toString config.services.mtr-exporter.port}"
          ];
        }];
      }

      {
        job_name = "smartctl";
        static_configs = [{
          targets = [
            "localhost:${toString config.services.prometheus.exporters.smartctl.port}"
          ];
        }];
      }

    ];
  };

  services.prometheus.exporters.node = {
    enable = true;
    port = 9002;
    disabledCollectors = [
      "bcache"
      "btrfs"
      "dmi"
      "infiniband"
      "xfs"
      "zfs"
    ];
    enabledCollectors = [
      "network_route"
      "cgroups"
    ];
  };

  services.smartd = {
    enable = true;
    autodetect = true;
  };

  services.prometheus.exporters.smartctl = {
    enable = true;
    port = 9003;
    maxInterval = "20s";
  };
  services.udev.extraRules = ''SUBSYSTEM=="nvme", KERNEL=="nvme[0-9]*", GROUP="disk"'';

  services.mtr-exporter = {
    enable = true;
    port = 9004;
    jobs = [
      { name = "kszk-eu"; address = "kszk.eu"; flags = [ "--tcp" "--port=80" ]; }
      { name = "github-com"; address = "github.com"; flags = [ "--tcp" "--port=80" ]; }
      { name = "five-local"; address = "five.local"; flags = [ "--tcp" "--port=80" ]; }
    ];
  };

  services.grafana = {
    enable = true;

    settings = {
      server = {
        http_addr = "127.0.0.1";
        http_port = 3333;
      };
      "auth.anonymous" = {
        enabled = true;
        org_role = "Editor";
      };
      auth = {
        disable_login_form = true;
        # disable_login = true;
      };
      # https://zach.oglesby.co/2024/02/08/nixos-grafana-tailscale.html
    };

    provision = {
      enable = true;
      datasources.settings.datasources = [
        {
          name = "Prometheus";
          uid = "abcd";
          isDefault = true;
          type = "prometheus";
          url = "http://127.0.0.1:${toString config.services.prometheus.port}";
        }

        {
          name = "Loki";
          uid = "efgh";
          isDefault = false;
          type = "loki";

          url = "http://127.0.0.1:${toString config.services.loki.configuration.server.http_listen_port}";
        }


      ];
      dashboards.settings.providers = [
        { options.path = "/etc/dashboards"; }
      ];
    };
  };

  # Loki
  services.loki = {
    enable = true;
    extraFlags = [ "--server.http-listen-port=3101" ];
    configuration = {
      auth_enabled = false;
      server = {
        http_listen_port = 3101;
        grpc_listen_port = 0;
      };
      ingester.lifecycler = {
        address = "127.0.0.1";
        ring = { kvstore.store = "inmemory"; replication_factor = 1; };
      };

      schema_config.configs = [
        { from = "2024-08-08"; store = "boltdb"; object_store = "filesystem"; schema = "v9"; index = { prefix = "index_"; period = "168h"; }; }
      ];

      storage_config = {
        boltdb.directory = "${config.services.loki.dataDir}/index";
        filesystem.directory = "${config.services.loki.dataDir}/chunks";
      };

      limits_config = {
        reject_old_samples = true;
        reject_old_samples_max_age = "168h";
        allow_structured_metadata = false;
      };

    };
  };

  # Promtail
  services.promtail = {
    enable = true;
    extraFlags = [ "--server.http-listen-port=3100" ];
    configuration = {
      server.http_listen_port = 3100;
      positions.filename = "/tmp/pos.yaml";
      clients = [
        { url = "http://127.0.0.1:${toString config.services.loki.configuration.server.http_listen_port}/loki/api/v1/push"; }
      ];
      scrape_configs = [
        { job_name = "journal"; relabel_configs = [ { source_labels = [ "__journal_systemd_unit" ]; target_label = "unit"; } ]; journal = { max_age = "12h"; path = "/var/log/journal"; labels = { job = "systemd-journal"; host = config.networking.hostName; }; }; }
      ];
    };
  };


  # Copy ./dashboard/*.json to /etc/dashboards
  environment.etc = with builtins; mapAttrs (
    key: value: {
      target = "dashboards/${key}";
      source = ./. + "/dashboards/${key}";
    }
  ) (readDir ./dashboards);

  networking.firewall.allowedTCPPorts = [
    80
    443
    config.services.grafana.settings.server.http_port
    config.services.prometheus.port
    #config.services.prometheus.pushgateway.port
    config.services.prometheus.exporters.node.port
    config.services.prometheus.exporters.smartctl.port
    config.services.mtr-exporter.port
    config.services.loki.configuration.server.http_listen_port
    config.services.promtail.configuration.server.http_listen_port
    config.services.webhook.port
  ];

  networking.extraHosts = ''
    127.0.0.1 grafana.${hostName}.local
    127.0.0.1 prometheus.${hostName}.local
    127.0.0.1 webhook.${hostName}.local
  '';

  services.caddy = {
    enable = true;
    virtualHosts = {


      "grafana.${hostName}.local".extraConfig = ''
        encode gzip
        tls internal
        reverse_proxy http://127.0.0.1:${toString config.services.grafana.settings.server.http_port}
      '';


      "prometheus.${hostName}.local".extraConfig = ''
        encode gzip
        tls internal
        reverse_proxy http://127.0.0.1:${toString config.services.prometheus.port}
      '';


      "webhook.${hostName}.local".extraConfig = ''
        encode gzip
        tls internal
        reverse_proxy http://127.0.0.1:${toString config.services.webhook.port}
      '';


    };
  };
}
