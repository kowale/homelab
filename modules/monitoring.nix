{ config, pkgs, ... }:

/*

Prometheus
    Time-series key-value database
    Queries by PromQL
    Pulls from exporters
    Debugging
        prom2json
        promexplorer
        promql-cli
    Altermanager
        karma
        kthxbye
        alertmanager-irc-relay
    Long-term storage
        victoriametrics
        thanos
        mimir

Exporters
    Telegraf (many exporters in one binary)
    Node, systemd, process
    GPU: dcgm
    Storage: smartctl
    Network: tailscalesd, unpoller, mtr
    Heartbeat: ping, blackbox
    Generic: SQL, JSON, script, pushgateway
    Nix? eBPF?

Loki
    Log aggregation
    Query by LogQL
    Tag-based storage
    Promtail collects logs

Tempo
    Trace aggregation
    Query by TraceQL
    Metric -> trace

Grafana
    Connect to Prometheus and Loki
    Declarative dashboards


Links
    https://blog.korfuri.fr/posts/2022/11/autogenerated-prometheus-configs-for-multiple-nixos-hosts/

*/

let

  inherit (config.networking) hostName;

  grafana = let
    inherit (config.services.grafana.settings) server;
  in {
    inherit (server) domain;
    port = server.http_port;
    addr = server.http_addr;
  };

  nodeExporter = config.services.prometheus.exporters.node;

in {

  services.prometheus = {
    enable = true;
    port = 9001;
    listenAddress = "localhost";

    rules = [
      ""
    ];

    alertmanagers = [
      {}
    ];

    scrapeConfigs = [
      {
        job_name = "node";
        static_configs = [{
          targets = [
            "localhost:${toString nodeExporter.port}"
          ];
        }];
      }
    ];

  };

  services.prometheus.exporters.node = {
    enable = true;
    port = 9002;
    enabledCollectors = [
      "cpu"
      "filesystem"
      "systemd"
    ];
  };

  services.grafana = {
    enable = true;

    settings = {
      server = {
        domain = "grafana.${hostName}.local";
        http_addr = "127.0.0.1";
        http_port = 3333;
      };
      "auth.anonymous" = {
        enabled = true;
        org_role = "Editor";
      };
      auth = {
        disable_login_form = true;
        # disable_login = true;
      };
      # https://zach.oglesby.co/2024/02/08/nixos-grafana-tailscale.html
    };

    provision = {
      enable = true;
      datasources.settings.datasources = [
        {
          name = "Prometheus";
          uid = "abcd";
          isDefault = true;
          type = "prometheus";
          url = "http://127.0.0.1:${toString config.services.prometheus.port}";
        }
      ];
      dashboards.settings.providers = [
        { options.path = "/etc/dashboards"; }
      ];
    };
  };

  # Copy ./dashboard/*.json to /etc/dashboards
  environment.etc = with builtins; mapAttrs (
    key: value: {
      target = "dashboards/${key}";
      source = ./. + "/dashboards/${key}";
    }
  ) (readDir ./dashboards);

  networking.firewall.allowedTCPPorts = [
    80 443
    grafana.port
    config.services.prometheus.port
    config.services.prometheus.exporters.node.port
  ];

  networking.extraHosts = ''
    127.0.0.1 ${grafana.domain} prometheus.${hostName}.local
  '';

  services.caddy = {
    enable = true;
    virtualHosts = {
      "prometheus.${hostName}.local".extraConfig = ''
        encode gzip
        tls internal
        reverse_proxy http://${config.services.prometheus.listenAddress}:${toString config.services.prometheus.port}
      '';

      ${grafana.domain}.extraConfig = ''
        encode gzip
        tls internal
        reverse_proxy http://${grafana.addr}:${toString grafana.port}
      '';
    };
  };
}
